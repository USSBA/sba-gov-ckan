version: 2.1

executors:
  default:
    docker:
      - image: circleci/node
  python:
    docker:
    - image: cimg/python:3.9

commands:
  install-aws:
    steps:
      - run:
          name: install aws
          command: |
            pip install awscli
  dockerbuild:
    parameters:
      container:
        type: string
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - deploy:
          name: Build << parameters.container >> container
          command: |
            cd << parameters.container >>
            docker image build -t << parameters.container >> .
      - cache_save:
          container: << parameters.container >>
  dockertag:
    parameters:
      container:
        type: string
    steps:
      - deploy:
          name: Tag << parameters.container >> container
          command: docker tag << parameters.container >> ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/<< parameters.container >>:latest
  dockerpush:
    parameters:
      container:
        type: string
    steps:
      - deploy:
          name: Push << parameters.container >> container to ECR
          command: docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/<< parameters.container >>:latest
  snykinstall:
    steps:
      - run:
          name: Install snyk
          command: sudo npm install -g snyk
  snykscan:
    parameters:
      container:
        type: string
    steps:
      - checkout
      - setup_remote_docker
      - snykinstall
      - cache_restore:
          container: << parameters.container >>
      - deploy:
          name: Snyk scan << parameters.container >> container
          command: snyk test --docker << parameters.container >>:latest --file=<< parameters.container >>/Dockerfile --exclude-base-image-vulns || true
  cache_restore:
    parameters:
      container:
        type: string
      fail_forward:
        type: boolean
        default: true
    steps:
      - restore_cache:
          keys:
            - v1-<< parameters.container >>-{{ .Branch }}
          paths:
            - /tmp/caches/<< parameters.container >>.tar
      - run:
          name: Load Docker image layer cache
          command: |
            set +o pipefail
            docker load -i /tmp/caches/<< parameters.container >>.tar || << parameters.fail_forward >>
  cache_save:
    parameters:
      container:
        type: string
    steps:
      - run:
          name: Save Docker image layer cache
          command: |
            mkdir -p /tmp/caches
            docker save -o /tmp/caches/<< parameters.container >>.tar << parameters.container >>
      - save_cache:
          key: v1-<< parameters.container >>-{{ .Branch }}-{{ epoch }}
          paths:
            - /tmp/caches/<< parameters.container >>.tar
  ecr_login:
    steps:
      - deploy:
          name: ECR login
          command: $(aws ecr get-login --no-include-email --region ${AWS_DEFAULT_REGION})
  ecr_upload:
    parameters:
      container:
        type: string
    steps:
      - checkout
      - setup_remote_docker
      - install-aws
      - cache_restore:
          container: << parameters.container >>
      - dockertag:
          container: << parameters.container >>
      - ecr_login
      - dockerpush:
          container: << parameters.container >>


jobs:
  docker-build:
    parameters:
      container:
        type: string
    executor: default
    steps:
      - dockerbuild:
          container: << parameters.container >>
  snyk-scan:
    parameters:
      container:
        type: string
    executor: default
    steps:
      - snykscan:
          container: << parameters.container >>
  upload-to-ecr:
    parameters:
      container:
        type: string
    executor: python
    steps:
      - ecr_upload:
          container: << parameters.container >>


workflows:
  version: 2
  docker:
    jobs:
      # CKAN
      - docker-build:
          name: Docker Build CKAN
          container: ckan
      - snyk-scan:
          name: Snyk Scan CKAN
          container: ckan
          requires: [Docker Build CKAN]
      - upload-to-ecr:
          name: Upload to ECR CKAN
          container: ckan
          requires: [Docker Build CKAN, Docker Build Solr, Docker Build Datapusher]
          filters:
            branches:
              only: master
      # Solr
      - docker-build:
          name: Docker Build Solr
          container: ckan-solr
      - snyk-scan:
          name: Snyk Scan Solr
          container: ckan-solr
          requires: [Docker Build Solr]
      - upload-to-ecr:
          name: Upload to ECR Solr
          container: ckan-solr
          requires: [Docker Build CKAN, Docker Build Solr, Docker Build Datapusher]
          filters:
            branches:
              only: master
      # Datapusher
      - docker-build:
          name: Docker Build Datapusher
          container: ckan-datapusher
      - snyk-scan:
          name: Snyk Scan Datapusher
          container: ckan-datapusher
          requires: [Docker Build Datapusher]
      - upload-to-ecr:
          name: Upload to ECR Datapusher
          container: ckan-datapusher
          requires: [Docker Build CKAN, Docker Build Solr, Docker Build Datapusher]
          filters:
            branches:
              only: master
