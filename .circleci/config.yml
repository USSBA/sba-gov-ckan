version: 2.1

orbs:
  aws-cli: circleci/aws-cli@1
  terraform: circleci/terraform@2

executors:
  circle-machine:
    # Required for multi-container docker-compose setups
    machine:
      image: ubuntu-2004:202107-02
      docker_layer_caching: true
  base:
    docker:
    - image: cimg/base:2020.12

commands:
  build-containers:
    steps:
    - ecr-image-build:
        image_name: ckan
    - ecr-image-build:
        image_name: ckan-datapusher
    - ecr-image-build:
        image_name: ckan-solr
  push-containers:
    steps:
    - ecr-image-push:
        image_name: ckan
    - ecr-image-push:
        image_name: ckan-datapusher
    - ecr-image-push:
        image_name: ckan-solr
  aws-init:
    parameters:
      region:
        type: string
        description: A default AWS region name
        default: us-east-1
    steps:
    - aws-cli/setup
    - run:
        name: aws-init
        command: |
          echo 'AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-<< parameters.region >>}' >> $BASH_ENV
          echo 'AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)' >> $BASH_ENV
          echo 'AWS_ECR_ENDPOINT="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"' >> $BASH_ENV
          source $BASH_ENV
  ecr-login:
    steps:
    - run:
        name: ecr docker login
        command: |
          aws_version=`aws --version 2>&1`
          if echo $aws_version | grep 'aws-cli/1' > /dev/null; then
            echo "aws-cli v1 detected. Logging in to ecr docker..."
            `aws ecr get-login --no-include-email --region ${AWS_DEFAULT_REGION}`
          elif echo $aws_version | grep 'aws-cli/2' > /dev/null; then
            echo "aws-cli v2 detected. Logging in to ecr docker..."
            aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin "${AWS_ECR_ENDPOINT}"
          else
            echo "Can't detect the version of awscli being used..."
            exit 1
          fi
  ecr-image-build:
    parameters:
      dockerfile:
        type: string
        default: Dockerfile
      image_name:
        type: string
      directory:
        type: string
    steps:
    - run:
        name: Build << parameters.dockerfile >> docker image
        command: |
          cd "<< parameters.directory >>"
          docker image build . -f "<< parameters.dockerfile >>" --tag "${AWS_ECR_ENDPOINT}/<< parameters.image_name >>:${CIRCLE_SHA1}"
  ecr-image-push:
    parameters:
      image_name:
        type: string
    steps:
    - deploy:
        name: docker image push
        command: |
          docker image push "${AWS_ECR_ENDPOINT}/<< parameters.image_name >>:${CIRCLE_SHA1}"
          echo "Successfully pushed image: ${AWS_ECR_ENDPOINT}/<< parameters.image_name >>:${CIRCLE_SHA1}"
          docker image tag \
            "${AWS_ECR_ENDPOINT}/<< parameters.image_name >>:${CIRCLE_SHA1}" \
            "${AWS_ECR_ENDPOINT}/<< parameters.image_name >>:${CIRCLE_BRANCH:-${CIRCLE_TAG:-NO_BRANCH_OR_TAG_CONFIGURED_BY_CIRCLE}}"
          docker image push "${AWS_ECR_ENDPOINT}/<< parameters.image_name >>:${CIRCLE_BRANCH:-${CIRCLE_TAG:-NO_BRANCH_OR_TAG_CONFIGURED_BY_CIRCLE}}"
          echo "Successfully pushed image: ${AWS_ECR_ENDPOINT}/<< parameters.image_name >>:${CIRCLE_BRANCH:-${CIRCLE_TAG:-NO_BRANCH_OR_TAG_CONFIGURED_BY_CIRCLE}}"
  terraform-install:
    steps:
      - terraform/install:
          terraform_version: 1.0.9
  terraform-format:
    parameters:
      folder:
        type: string
        description: A relative path from the project root in which to perform terrafrom fmt
    steps:
      - deploy:
          name: Terraform Format Check
          command: |
            throw_error() {
              echo $1
              return 1
            }
            cd << parameters.folder >> || throw_error "FATAL: command 'cd << parameters.folder >>' has failed"
            terraform fmt -check -recursive
  terraform-validate:
    parameters:
      folder:
        type: string
        description: A relative path from the project root in which to perform terrafrom validate
      workspace:
        type: string
        description: A workspace in which to perform terraform validate
    steps:
      - deploy:
          name: Terraform Validate Check
          command: |
            throw_error() {
              echo $1
              return 1
            }
            cd << parameters.folder >> || throw_error "FATAL: command 'cd << parameters.folder >>' has failed"
            terraform workspace select << parameters.workspace >> || throw_error "FATAL: command 'terraform workspace select << parameters.workspace >>' has failed"
            terraform validate || throw_error "FATAL: command 'terraform validate' has failed"
  terraform-init:
    parameters:
      folder:
        type: string
        description: A relative path from the project root in which to perform terrafrom init
    steps:
      - deploy:
          name: Terraform Init
          command: |
            throw_error() {
              echo $1
              return 1
            }
            cd << parameters.folder >> || throw_error  "FATAL: command 'cd << parameters.folder >>' has failed"
            terraform -version || throw_error "FATAL: command 'terraform -version' has failed"
            terraform init -input=false || throw_error "FATAL: command 'terraform init -input-false' has failed"
            echo "image_tag = \"$CIRCLE_SHA1\"" >> ./build.auto.tfvars
  terraform-plan:
    parameters:
      folder:
        type: string
        description: A relative path from the project root in which to perform terrafrom plan
      workspace:
        type: string
        description: A workspace in which to perform terraform plan
    steps:
      - deploy:
          name: Terraform Plan
          command: |
            throw_error() {
              echo $1
              return 1
            }
            cd << parameters.folder >> || throw_error "FATAL: command 'cd << parameters.folder >>' has failed"
            terraform workspace select << parameters.workspace >> || throw_error "FATAL: command 'terraform workspace select << parameters.workspace >>' has failed"
            terraform plan -out=<< parameters.workspace >>.tfplan -input=false || throw_error "FATAL: command 'terraform plan -out=<< parameters.workspace >>.tfplan -input=false' has failed"
  terraform-apply:
    parameters:
      folder:
        type: string
        description: A relative path from the project root in which to perform terrafrom apply
      workspace:
        type: string
        description: A workspace in which to perform terraform apply
    steps:
      - deploy:
          name: Terraform Apply
          command: |
            throw_error() {
              echo $1
              return 1
            }
            cd << parameters.folder >> || ( echo "directory << parameters.folder >> does not exist"; exit 1 )
            terraform workspace select << parameters.workspace >> || ( echo "terraform workspace select << parameters.workspace >> has failed"; exit 1 )
            terraform apply -input=false << parameters.workspace >>.tfplan || ( echo "terraform apply has failed"; exit 1 )

jobs:
  test-terraform-validate:
    executor: base
    parameters:
      workspace:
        type: string
        description: A terraform workspace name
    steps:
      - checkout
      - aws-init
      - terraform-install
      - terraform-init:
          folder: terraform
      - terraform-validate:
          folder: terraform
          workspace: << parameters.workspace >>
  test-terraform-format:
    executor: base
    steps:
      - checkout
      - terraform-install
      - terraform-format:
          folder: terraform
  test-terraform-plan:
    executor: base
    parameters:
      workspace:
        type: string
        description: A terraform workspace name
    steps:
      - checkout
      - aws-init
      - terraform-install
      - terraform-init:
          folder: terraform
      - terraform-plan:
          folder: terraform
          workspace: << parameters.workspace >>
  build-containers:
    executor: circle-machine
    steps:
      - checkout
      - run:
          name: aws-env
          command: |
            echo 'AWS_ECR_ENDPOINT="ecr-temp"' >> $BASH_ENV
      - build-containers
  build-and-push-containers:
    executor: base
    steps:
    - checkout
    - setup_remote_docker:
        docker_layer_caching: true
    - aws-init
    - ecr-login
    - ecr-image-build:
        directory: ckan
        image_name: ckan
    - ecr-image-push:
        directory: ckan
        image_name: ckan-datapusher
    - ecr-image-push:
        directory: ckan
        image_name: ckan-solr
  deploy-service:
    executor: base
    parameters:
      workspace:
        type: string
        description: A terraform workspace name
    steps:
      - checkout
      - aws-init
      - terraform-install
      - terraform-init:
          folder: terraform
      - terraform-plan:
          folder: terraform
          workspace: << parameters.workspace >>
      - terraform-apply:
          folder: terraform
          workspace: << parameters.workspace >>

workflows:
  version: 2
  tests:
    jobs:
    - test-terraform-validate:
        context: sba-gov-upper
    - test-terraform-format
    - build-containers
  deploy:
    jobs:
    - deploy-service:
        name: deploy-service-stg
        context: sba-gov-upper
        workspace: stg
        requires:
          - build-and-push-containers-upper
        filters:
          branches:
            ignore:
            - /.*/
          tags:
            only:
            - /rc-v[0-9]+(\.[0-9]+)*$/
    - test-terraform-plan:
        name: test-terraform-plan-prod
        context: sba-gov-upper
        workspace: prod
        requires:
        - build-and-push-containers-upper
        filters:
          branches:
            ignore:
            - /.*/
          tags:
            only:
            - /v[0-9]+(\.[0-9]+)*$/
    - hold-for-approval:
        type: approval
        context: sba-gov-upper
        requires:
          - test-terraform-plan-prod
        filters:
          branches:
            ignore:
            - /.*/
          tags:
            only:
            - /v[0-9]+(\.[0-9]+)*$/
    - deploy-service:
        name: deploy-service-prod
        context: sba-gov-upper
        workspace: prod
        requires:
        - hold-for-approval
        filters:
          branches:
            ignore:
            - /.*/
          tags:
            only:
            - /v[0-9]+(\.[0-9]+)*$/
