version: '3'

volumes:
  ckan:
  #solr:
  postgres:

networks:
  vpc:
    driver: bridge
    ipam:
      config:
      - subnet: 10.10.0.0/16
        gateway: 10.10.0.1

services:
  ckan:
    container_name: ckan
    image: ckan
    depends_on:
    - postgres
    build:
      context: ./ckan/
      dockerfile: Dockerfile
    expose:
    - 5000
    ports:
    - 5000:5000
    networks:
      vpc:
        ipv4_address: 10.10.0.2
    env_file:
      - .env.local
    #volumes:
    #- ckan:/var/lib/ckan/
    ## AWS Configuration: uncomment this line and ensure you have your AWS credentials configured in your local ~/.aws directory
    #- ~/.aws/:/root/.aws/

  postgres:
    container_name: postgres
    image: postgres:12.0-alpine
    environment:
    - POSTGRES_PASSWORD=fearless
    - POSTGRES_USER=ckan_default
    - POSTGRES_DB=ckan_default
    expose:
    - 5432
    networks:
      vpc:
        ipv4_address: 10.10.0.4
    volumes:
    - ./postgres/scripts:/docker-entrypoint-initdb.d/
    #- postgres:/var/lib/postgresql/data/

  solr:
    container_name: solr
    image: ckan/ckan-solr:2.10-solr9
    expose:
    - 8983
    ports:
    - 8983:8983
    networks:
      vpc:
        ipv4_address: 10.10.0.5
    #volumes:
    #- solr:/opt/solr/server/solr/ckan/data/
    ## This can be toggled as needed to mimic the EFS configuration in AWS.
    #- ./logs:/var/solr/logs

  redis:
    container_name: redis
    image: redis:latest
    expose:
    - 6379
    ports:
    - 6379:6379
    networks:
      vpc:
        ipv4_address: 10.10.0.6

  smtp:
    image: reachfive/fake-smtp-server
    expose:
    - 1025
    - 1080
    ports:
    - 1025:1025
    - 1080:1080
    networks:
      vpc:
        ipv4_address: 10.10.0.7
    command: ["node", "index.js", "--auth", "fake:fake"]

